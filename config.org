#+STARTUP: overview
#+CREATOR: fethi okyar
#+LANGUAGE: en
#+OPTIONS: num:nil toc:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
#+TITLE: emacs cofiguration from scratch

* interface settings
*** startup settings
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
#+END_SRC
** cursor motion, etc
*** highlighting, beacon
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))

  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
*** backward/forward word in camelCase
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
*** electric paranthesis
#+BEGIN_SRC emacs-lisp
  (setq electric-pairs '(
			 (?\( . ?\))
			 (?\[ . ?\])
			 ))
  (electric-pair-mode t)
#+END_SRC
*** kill-whole-word function
#+BEGIN_SRC  emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
*** hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** terminal stuff
*** ansi term uses zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
** modeline
*** show lines and columns
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
* helpers
** help for C-x, M-x, etc.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1))

  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ( "M-x" . smex))
#+END_SRC
** searching with ido
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
*** ido vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** avy
** auto-completion (company)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* org mode stuff
For a better experience, the three Org commands org-store-link, org-capture and org-agenda ought to be accessible anywhere in Emacs, not just in Org buffers. To that effect, you need to bind them to globally available keys
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
#+END_SRC

Pretty bullets using org-bullets
** bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

Yasnippet settings
** yasnippet stuff
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
      :ensure t
      :config
      (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
      (yas-global-mode 1))
#+END_SRC
* buffers and windows
** switch/kill buffers
*** ibuffer and ido-switch-buffer
#+BEGIN_SRC emacs-lisp
;;  (global-set-key (kbd "C-x C-b") 'ibuffer)
;;  (global-set-key (kbd "C-x b") 'ido-switch-buffer)  
;;  (defalias 'list-buffers 'ido-switch-buffer)  ;; from zamansky
#+END_SRC
*** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
** switching windows
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
*** window splittin
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
*** scrollin
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-f e" . sudo-edit))
#+END_SRC
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 15)))
    (setq dashboard-banner-logo-title "Hello UncleDave!"))
#+END_SRC
* convenient functions
** config edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** config reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)    
#+END_SRC
** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
