#+STARTUP: overview
#+CREATOR: fethi okyar
#+LANGUAGE: en
#+OPTIONS: num:nil toc:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
#+TITLE: emacs configuration from scratch

* startup
** dashboard
enable emacs dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 15)))
    (setq dashboard-banner-logo-title "Hello UncleDave!"))
#+END_SRC
** Enable emacs server
:PROPERTIES:
Is the server started by the xinit process? do we really need the line below? Or should it be dome here?
#+begin_src emacs-lisp
   (load "server")
  (unless (server-running-p) (server-start))
  #+end_src

** edit as sudo
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :ensure t
  :bind
  ("s-e" . sudo-edit))
#+END_SRC

* modeline
* interface settings
** startup settings
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
#+END_SRC
** cursor motion, etc
*** highlighting, beacon
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))

  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
*** backward/forward word in camelCase
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
*** electric paranthesis
#+BEGIN_SRC emacs-lisp
  (setq electric-pairs '(
			 (?\( . ?\))
			 (?\[ . ?\])
			 ))
  (electric-pair-mode t)
#+END_SRC

** terminal stuff
 ansi term uses zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
** show lines and columns
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

** Expand region
A pretty simple package, takes your cursor and semantically expands the region, so words, sentences, maybe the contents of some parentheses, it's awesome, try it out.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

uuu* helpers
** ivy, a prerequisite for others
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config (ivy-mode 1))
#+END_SRC

** swiper, the default search is lame
I like me some searching, the default search is very meh. In emacs, you mostly use search to get around your buffer, much like with avy, but sometimes it doesn't hurt to search for entire words or mode, swiper makes sure this is more efficient.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC

** help for C-x, M-x, etc.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1))

  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ( "M-x" . smex))
#+END_SRC

** searching with ido
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

*** ido vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** avy and why it's the best thing in existence
Many times have I pondered how I can move around buffers even quicker.
I'm glad to say, that avy is precisely what I needed, and it's precisely what you need as well.
In short, as you invoke one of avy's functions, you will be prompted for a character
that you'd like to jump to in the /visible portion of the current buffer/.
Afterwards you will notice how all instances of said character have additional letter on top of them.
Pressing those letters, that are next to your desired character will move your cursor over there.
Admittedly, this sounds overly complicated and complex, but in reality takes a split second
and improves your life tremendously.

I like =M-s= for it, same as =C-s= is for moving by searching string, now =M-s= is moving by searching characters.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

** auto-completion (company)
This is from deadreth
#+BEGIN_SRC emacs-lisp
  ;;  (use-package company
  ;;    :ensure t
  ;;    :init
  ;;    (add-hook 'after-init-hook 'global-company-mode))
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))

  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)


  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
                              company-dabbrev-code
                              company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'python-mode-hook 'flycheck-mode)

  (with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))

  (defun python-mode-company-init ()
    (setq-local company-backends '((company-jedi
                                    company-etags))))
  (use-package company-shell
    :ensure t
    :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
                                    company-shell-env
                                    company-etags
                                    company-dabbrev-code))))
#+END_SRC

** line numbers and programming
Every now and then all of us feel the urge to be productive and write some code.
In the event that this happens, the following bit of configuration makes sure that 
we have access to relative line numbering in programming-related modes.
I highly recommend not enabling =linum-relative-mode= globally, as it messed up 
something like =ansi-term= for instance.
#+BEGIN_SRC emacs-lisp
  ;;  (use-package linum-relative
  ;;    :ensure t
  ;;    :config
  ;;      (setq linum-relative-current-symbol "")
  ;;      (add-hook 'prog-mode-hook 'linum-relative-mode))
  (global-display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC
* math stuff
* latex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :defer t
    :hook (LaTeX-mode . LaTeX-math-mode)
    :config
    ;; Enable PDF mode
    (setq TeX-PDF-mode t)
    ;; Enable synctex correlation
    (setq TeX-source-correlate-mode t)
    (setq TeX-source-correlate-start-server t)
    ;; Use the default viewer
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
    ;; Enable auto-saving and parsing of documents
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    ;; Enable reftex
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    ;; Keybinding for compiling
    (define-key LaTeX-mode-map (kbd "C-c C-c") 'TeX-command-master)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    )
#+END_SRC
** PDF Tools Configuration
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    ;; Initialize pdf-tools
    (pdf-tools-install)
    ;; Disable line numbers in pdf-view-mode
    (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))
    )
#+END_SRC

** yasnippet stuff
Yasnippet settings
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
      :ensure t
      :config
      (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
      (yas-global-mode 1))
#+END_SRC

** reveal.js stuff
#+BEGIN_SRC elisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "file:///home/fethi/software/reveal.js")
  ;;(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
#+END_SRC

* org mode
** keybindings
For a better experience, the three Org commands org-store-link, org-capture and org-agenda ought to be accessible anywhere in Emacs, not just in Org buffers. To that effect, you need to bind them to globally available keys
#+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c l") #'org-store-link)
   (global-set-key (kbd "C-c a") #'org-agenda)
   (global-set-key (kbd "C-c c") #'org-capture)
#+END_SRC

** agenda files
#+BEGIN_SRC emacs-lisp
      (setq org-agenda-files
	'("/home/fethi/snkr/org/ajanda.kisisel"
	  "/home/fethi/snkr/org/ajanda.bilimsel"
	  "/home/fethi/snkr/org/ajanda.mesleki"))
#+END_SRC

customizations from Rainer König
** capture mode and templates
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f6>") 'org-capture)
  (setq org-capture-templates
    '(("b" "Bilimsel")
      ("bj" "journal entry" entry
       (file+headline "~/snkr/org/jurnal.bilimsel" "Capture")
       (file "~/snkr/org/capture_journal")
       :empty-lines-before 1)
      ("bt" "TODO entry" entry
       (file+headline "~/snkr/org/ajanda.bilimsel" "Capture")
       (file "~/snkr/org/capture_todo")
       :empty-lines-before 1)
      ("k" "Kişisel")
      ("kj" "journal entry" entry
       (file+headline "~/snkr/org/jurnal.kisisel" "Capture")
       (file "~/snkr/org/capture_journal")
       :empty-lines-before 1)
      ("kt" "TODO entry" entry
       (file+headline "~/snkr/org/ajanda.kisisel" "Capture")
       (file "~/snkr/org/capture_todo")
       :empty-lines-before 1)
      ("m" "Mesleki")
      ("mj" "journal entry" entry
       (file+headline "~/snkr/org/jurnal.mesleki" "Capture")
       (file "~/snkr/org/capture_journal")
       :empty-lines-before 1)
      ("mt" "TODO entry" entry
       (file+headline "~/snkr/org/ajanda.mesleki" "Capture")
       (file "~/snkr/org/capture_todo")
       :empty-lines-before 1)))
#+END_SRC

** logging, drawer settings
#+BEGIN_SRC emacs-lisp
 (setq org-log-into-drawer t)
 (setq org-log-reschedule 'note)
 (setq org-refile-allow-creating-parent-nodes 'confirm)
 (setq org-refile-targets '((org-agenda-files :level . 1)))
 (setq org-refile-use-outline-path 'file)
#+END_SRC

* buffers and windows
Another big thing is, buffers. If you use emacs, you use buffers, everyone loves them.
Having many buffers is useful, but can be tedious to work with, let us see how we can improve it.

** Always murder current buffer
Doing =C-x k= should kill the current buffer at all times, we have =ibuffer= for more sophisticated thing.
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

** Kill buffers without asking for confirmation
Unless you have the muscle memory, I recommend omitting this bit, as you may lose progress for no reason when working.
#+BEGIN_SRC emacs-lisp
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+END_SRC

** Turn switch-to-buffer into ibuffer
I don't understand how ibuffer isn't the default option by now.
It's vastly superior in terms of ergonomics and functionality, you can delete buffers, rename buffer, move buffers, organize buffers etc.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

** expert-mode
If you feel like you know how ibuffer works and need not to be asked for confirmation after every serious command, enable this as follows.
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

** close-all-buffers
It's one of those things where I genuinely have to wonder why there is no built in functionality for it.
Once in a blue moon I need to kill all buffers, and having ~150 of them open would mean I'd need to spend a few too many
seconds doing this than I'd like, here's a solution.

This can be invoked using =C-M-s-k=. This keybinding makes sure you don't hit it unless you really want to.
#+BEGIN_SRC emacs-lisp
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+END_SRC

* language modes
From deadreth
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            '(lambda ()
               (visual-line-mode 1)))

  (global-set-key (kbd "C-c '") 'org-edit-src-code)

  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

** gud - grand unified debugger
this section provided by openai but needs to debugging, some functions do not work
#+begin_src emacs-lisp
  (use-package gud
    :ensure t
    :config
    ;; Define Octave-specific GUD setup
    ;; Dummy function to avoid 'void function' error
    (defun gud-gdb-massage-args (file args)
      "Massage arguments for GDB."
      args)

    ;; Dummy function to avoid 'void function' error
    (defun gud-gdb-marker-filter (string)
      "Filter GDB markers."
      string)

    ;; Dummy function to avoid 'void function' error
    (defun gud-gdb-find-file (file)
      "Find the source file for GDB."
      (find-file-noselect file))
    ;; Setup GUD for Octave
    (defun gud-octave ()
      "Run Octave GUD."
      (interactive)
      (gud-common-init "octave" 'gud-gdb-massage-args 'gud-gdb-marker-filter 'gud-gdb-find-file)
      (set (make-local-variable 'gud-minor-mode) 'gud-octave)
      ;;(gud-def gud-break  "dbstop at %l in %f"   "\C-b" "Set breakpoint at current line.")
      (gud-def gud-break  "dbstop in %f at %l"   "\C-b" "Set breakpoint at current line.")
      (gud-def gud-remove "dbclear at %l in %f" "\C-d" "Remove breakpoint at current line.")
      (gud-def gud-step   "dbstep %p"           "\C-s" "Step one source line with display.")
      (gud-def gud-next   "dbnext %p"           "\C-n" "Step one line (skip functions).")
      (gud-def gud-cont   "dbcont"              "\C-r" "Continue with display.")
      (gud-def gud-finish "dbquit"              "\C-f" "Finish executing current function.")
      (gud-def gud-print  "dbprint %e"          "\C-p" "Print expression at point.")
      (setq comint-prompt-regexp "^(debug|more|octave|db> *\\|octave.*[\\]: *)")
      (setq paragraph-start comint-prompt-regexp)
      (run-hooks 'gud-octave-hook))
    )

  (add-hook 'octave-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c C-d") 'gud-octave)))

  ;; Additional customizations for GUD
  (add-hook 'gud-mode-hook
            (lambda ()
              (local-set-key (kbd "<f5>") 'gud-cont)
              (local-set-key (kbd "<f9>") 'gud-break)
              (local-set-key (kbd "<f10>") 'gud-next)
              (local-set-key (kbd "<f11>") 'gud-step)
              (local-set-key (kbd "S-<f11>") 'gud-finish)))

#+end_src

** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)

  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))

#+end_src

** git integration
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)
  :bind
  ("M-g" . magit-status))
#+END_SRC

** htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC>

** python
   There will be a list of utilities to help with python programming
   As a first choice, trying with elpy...
*** elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC

** maxima
imaxima seems to be the choice offered by openai but does not exist in melpa. using the maxima package instead
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/maxima/")
  (use-package maxima
    :config
    (add-hook 'maxima-mode-hook 'my-maxima-mode-hook)
    (add-hook 'maxima-inferior-mode-hook 'my-maxima-mode-hook)
    ;; Define your custom function to be executed when entering maxima-mode
    (defun my-maxima-mode-hook ()
      (message "Maxima mode enabled! Do something here.")
      ;; You can add more customizations or functions to be executed when entering Maxima mode
      )
    (setq
     org-format-latex-options (plist-put org-format-latex-options :scale 2.0)
     maxima-display-maxima-buffer nil)
    :mode ("\\.ma[cx]\\'" . maxima-mode)
    :interpreter ("maxima" . maxima-mode)
    )
#+END_SRC
The following lines were commented out (to see whether if things are right without them)
(autoload 'maxima-mode "maxima" "Maxima mode" t)
(autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t) ;;
(autoload 'maxima "maxima" "Maxima interaction" t)
(autoload 'imath-mode "imath" "Imath mode for math formula input" t) ;;
(setq imaxima-use-maxima-mode-flag t) ;;
(add-to-list 'auto-mode-alist '("\\.ma[cx]\\'" . maxima-mode))

** Octave
configuration provided by openai
#+BEGIN_SRC emacs-lisp
  (use-package octave
    :ensure t
    :mode ("\\.m\\'" . octave-mode)
    :interpreter ("octave" . octave-mode)
    :config
    ;; Enable inferior-octave-mode for interaction with Octave process
    (add-hook 'octave-mode-hook
              (lambda ()
                (abbrev-mode 1)
                (auto-fill-mode 1)
                (if (eq window-system 'x)
                    (font-lock-mode 1))
                ;; Define key bindings for sending code to Octave process
                (define-key octave-mode-map (kbd "C-c C-z") 'run-octave)
                (define-key octave-mode-map (kbd "C-c C-r") 'octave-send-region)
                (define-key octave-mode-map (kbd "C-c C-b") 'octave-send-buffer)
                (define-key octave-mode-map (kbd "C-c C-l") 'octave-send-line)
                (local-set-key (kbd "C-c C-d") 'gud-octave)
                (local-set-key (kbd "C-c b") 'gud-break)   ; Changed key binding for setting breakpoints
                (local-set-key (kbd "C-c u") 'gud-remove)  ; Changed key binding for removing breakpoints
                (local-set-key (kbd "C-c s") 'gud-step)    ; Changed key binding for step
                (local-set-key (kbd "C-c n") 'gud-next)    ; Changed key binding for next
                ;;(local-set-key (kbd "C-c r") 'gud-cont)    ; Changed key binding for continue
                (local-set-key (kbd "C-c f") 'gud-finish)  ; Changed key binding for finish
                (local-set-key (kbd "C-c p") 'gud-print)))

    ;; ensures that Octave code is properly indented and that the inferior Octave process is more user-friendly with colored output and automatic scrolling
    (setq octave-block-offset 4) ;; Set indentation level to 4 spaces
    (setq inferior-octave-startup-args '("--no-gui")) ;; Start Octave without GUI
    (add-hook 'inferior-octave-mode-hook
              (lambda ()
                (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
                (setq comint-prompt-read-only t)
                (setq comint-scroll-to-bottom-on-output t)))
    (add-hook 'octave-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c C-d") 'gud-octave)))
    )
#+END_SRC
* Kill ring
There is a lot of customization to the kill ring, and while I have not used it much before,
I decided that it was time to change that.
** Maximum entries on the ring
The default is 60, I personally need more sometimes.
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 100)
#+END_SRC

** popup-kill-ring
Out of all the packages I tried out, this one, being the simplest, appealed to me most.
With a simple M-y you can now browse your kill-ring like browsing autocompletion items.
C-n and C-p totally work for this.
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

* convenient functions
** config edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

** config reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)    
#+END_SRC

** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC

** kill-whole-word function
#+BEGIN_SRC  emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC

